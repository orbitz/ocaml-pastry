* About
PASTRY is a DHT.

PASTRY is described here http://research.microsoft.com/en-us/um/people/antr/PAST/pastry.pdf

The main implementation can also be found here http://www.freepastry.org/

A Go implementation can be found https://github.com/secondbit/wendy
* Features
** DONE Key representation
Keys are 128 bit numeric value.

Operations:
- Relational comparison
- Common prefix digits given a particular base (1 <= b <= 8 for now)
- Find the closest between two nodes
** DONE Node
A node represents an abstract location.

A node is created and manipulated by the IO layer.

Nodes have a strict ordering between them.

Operations:
- distance - Give the distance to the node
- key - Key representation of the node
** DONE Routing table
Represents a table of nodes that the algorithm can route traffic to.  Each entry
in the table corresponds to a number of nodes.

The routing table two dimensional where the columns are the numeration of the
digits in the base the node id is represented in and the rows are the digits of
the node id.

Given a base = 4 node id of 10233102, a hypothetical routing table would be:

|--------+-----+----------+----------+----------+----------|
| NodeId | Pos |        0 |        1 |        2 |        3 |
|--------+-----+----------+----------+----------+----------|
|      1 |   0 | 02212102 |      (1) | 22301203 | 31203203 |
|      0 |   1 |      (0) | 11301233 | 12230203 | 13021022 |
|      2 |   2 | 10031203 | 10132102 |      (2) | 10323302 |
|      3 |   3 | 10200230 | 10211302 | 10222302 |      (3) |
|      3 |   4 | 10230322 | 10231000 | 10232121 |      (3) |
|      1 |   5 | 10233001 |      (1) | 10233232 |          |
|      0 |   6 |      (0) |          | 10233120 |          |
|      2 |   7 |          |          |      (2) |          |
|--------+-----+----------+----------+----------+----------|

Operations:
- Add a (nodeid, key)
- Delete by key
- Query a list of hosts given a key
- Get a list of all the nodes
** TODO Neighborhood set
Unclear if this is needed, looks like later versions of pastry remove this
** DONE Leaf set
The leaf set is an even number with value L.  Half the leaf set is devoted to
nodes whose value is smaller than the current nodeid and half devoted to larger.

Common values or 2^b or 2 x 2^b

NodeId 10233102

|----------+----------+----------+----------|
|  Smaller |  Smaller |   Larger |   Larger |
|----------+----------+----------+----------|
| 10233033 | 10233021 | 10233120 | 10233122 |
| 10233001 | 10233000 | 10233230 | 10233232 |
|----------+----------+----------+----------|

The table is just for visualizing it and the actual rows do not matter, just
that half of it is composed of nodes smaller and half of nodes larger.
** DONE Router
The Router contains a leaf set and a routing table.  The Router only changes
when a node is added or removed.

A Router starts out with no entries in it.  Nodes are added to it and popular
the leaf set first and spill over to the routing table.
*** Adding a Node
When a node is added, it is first added to the leaf set.  The node is either
inserted just fine, or it cannot be added because the leaf set is full and the
new node is not any closer to the current node, or it evicts a node in there.

In the case of not fitting in the leaf set or evicting a node, the node is
possibly added to the routing table.  The node is successfully added to the
routing table if the node in its position is empty or if present node is closer
than the existing node.
*** Removing a Node
A node is removed simply by finding it in the Router and deleting its entry.
** TODO Join Protocol
Joining is the act of a node joining an existing cluster.  The join protocol
describes how a node joins an existing cluster.

The join protocol boils down to:

- The joining node sending an Announce message to the node it knows about.
- The receiving node routes the Announce message to appropriate node using the
  joining node's id as the key.
- Every node hit a long the route adds its relevant routing information.
- When the announce message reaches the destination node, it sends the message
  pack to the joining node.
- The joining node takes all the routing information, constructs its own router
  then contacts appropriate nodes, informing them of its existence.
- If an error happens at any point, the node simply retries the entire process.

In detail:

Consider a cluster with only one node in it.

- A new node sends an Announce message.
- There is only 1 node, so the message gets routing to the existing node.
- The existing node responds to the joining node with all of its routing
  information, which is empty at this point.
- The joining node takes the announce response, finds the entry in it that is
  closest to its own node id and adds it, and its leaf set, to its own leaf set.
  It then sends its leaf set to every entry in its newly created leaf set.
  Every node contacted then adds the contactee to its own router.  How these
  nodes handle this message is described later.

By this point, each node will have the other in its leaf set and contain empty
routing tables.

The above pattern continues, filling up the leaf set.  At some point, a joining
node will fill up a nodes leaf set, causing spill over into the routing table.

When a joining node receives an Announce response with entries 
